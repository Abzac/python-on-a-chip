==========================
The Windows Sample Project
==========================

:Author:    Tyler Wilson, based on Desktop by Dean Hall
:Id:        $Id: README 317 2009-03-17 02:25:27Z dwhall $

Purpose
-------

This is a sample project that demonstrates running interactive PyMite on the
(Windows) desktop. This differs from the POSIX version in platform 'desktop'


Building the Project
--------------------

Start with a clean PyMite tree.


 - Unzip the windows.zip file into the src\platform folder.


Visual C++ 2008 Express Edition
-------------------------------

 - I used a simple .bat file to generate the needed _img.c and _nat.c files. This is py2c.bat. Run this
   before loading or building via the solution file.


 - Start Visual C++ 2008 Express Edition IDE. Open the src\platform\windows\pymite.sln file.


 - Build. If successful, go to the next step.


 - Open a command prompt, cd to <pymite>\src\tools, and perform the following command:

python ipm.py --desktop


 - Go back to Visual Studio, and select Debug. This will attach to the pymite.exe that was executed in the
   step above. You can set breakpoints, watch variables, etc..



SCons
-----

- Open a "Visual Studio 2008 Command Prompt". This is located under the Tools section in the
  start menu. This is needed so that the proper INCLUDE, LIB and PATH variables are available.


- 'cd' to the root of the pymite directory.


- Type 'scons PLATFORM=windows' at the prompt and press <Enter>. Everything should build, and a
  main.exe created in the src\platform\windows directory


- cd to the src\tools directory and type 'python ipm.py --desktop' and <Enter> and you should be able to do all the standard
  PyMite things.



TODO
----

 - Instead of the py2c.bat file, use a custom build step in the Visual Studio IDE.


 - Get the VS Solution and SCons builds working under x64.


 - Add some simple Windows-specific cun


Version History
---------------

- Added a local windows stdint.h. This allows us to use the core vm source code
  as-is for the Windows build. This could have issues if you try to build with MinGW
  or other compiler set.

- I used the new pm_features.h to add the needed defines for snprintf. The __DEBUG__ to _DEBUG
  should also be there too.

- Removed comments about editing src/tools/ipm.py since those changes were made in the trunk.

.. :mode=rest:
