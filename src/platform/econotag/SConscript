import os
import glob

Import("vars")

vars.Add("PM_UART_BAUD", "Baud rate of the ipm serial connection.", "115200")
vars.Add("IPM", "Add the interactive library to the standard lib", True)
vars.Add("MCU", "Type of ARM device; the arg to -mcpu.", "arm7tdmi-s")
vars.Add("NM", "", "arm-linux-nm")
vars.Add("OBJCOPY", "", "arm-linux-objcopy")
vars.Add("OBJDUMP", "", "arm-linux-objdump")
vars.Add("SIZE", "", "arm-linux-size")
#vars.Add("DEBUG","", True)
         
CFLAGS = " -DUART_BAUD=$PM_UART_BAUD -Dgcc" \
         " -DUSE_STDPERIPH_DRIVER" \
         " -Wall -Wimplicit" \
         " -march=armv4t -mlong-calls -mtune=arm7tdmi-s" \
         " -DCONFIG_ARM -D__ARM__ -mthumb-interwork" \
         " -mcpu=$MCU -mthumb -Os -fomit-frame-pointer -mlittle-endian" \
         " -ffunction-sections -fdata-sections -fno-strict-aliasing"
         
#          " -fno-builtin -ffreestanding -nostdinc -isystem " \

LDFLAGS = " -mcpu=$MCU -mthumb -Wl,-T -Xlinker src/platform/mc1322x/mc1322x.lds" \
          " -u _start -Wl,-static " \
	  " -Wl,-Map=main.map " \
	  " -L/home/malvira/mc1322x-oe/tmp/cross/armv4t/lib/gcc/arm-linux/4.3.2 " \
          " -nostartfiles -Wl,--allow-multiple-definition"
     
AFLAGS = "-x assembler-with-cpp $_CPPINCFLAGS -mcpu=$MCU -mthumb -Wall -c"

if "DEBUG" in vars.args.keys():
    CFLAGS = "-g -gstabs -D__DEBUG__=1 " + CFLAGS

SOURCES = ["main.c", "plat.c"]
SOURCES += glob.glob("FWLib/src/*.c")
SOURCES += glob.glob("FWLib/src/*.s")

PY_SOURCES = ["main.py"]
PM_LIB_ROOT = ["pmvm_%s" % vars.args["PLATFORM"]]

env = Environment(variables = vars,
                  CPPPATH = ["#src/vm", "#src/platform/mc1322x", "#src/platform/mc1322x/FWlib/inc"],
                  CC = "arm-linux-gcc",
                  AS = "arm-linux-gcc",
                  ASFLAGS = AFLAGS,
                  CCFLAGS = CFLAGS,
                  CXX = "arm-linux-g++",
                  AR = "arm-linux-ar",
                  ARFLAGS = "rcs",
                  RANLIB = "arm-linux-ranlib",
                  LINKFLAGS = LDFLAGS,
                  ENV = os.environ)
                
vmlib = SConscript(["../../vm/SConscript"], ["env", "vars"])
img_sources = env.Command(["main_img.c", "main_nat.c"], [PY_SOURCES],
    "src/tools/pmImgCreator.py -c -u -o src/platform/mc1322x/main_img.c" \
    " --native-file=src/platform/mc1322x/main_nat.c $SOURCES")

elf = env.Program("main.elf", SOURCES + img_sources + vmlib,
                  LIBS = [PM_LIB_ROOT,"c","gcc","m"], LIBPATH = ["../../vm"])


bin = env.Command("main.bin", "main.elf", "$OBJCOPY -O binary $SOURCE $TARGET")