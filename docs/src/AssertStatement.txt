====================
The Assert Statement
====================

:Author:    Dean Hall
:Id:        $Id$

Purpose
-------

This document describes the implementation and use of the assert statement
in the PyMite virtual machine (VM).  In doing so, it serves as a design
document for the PyMite developer and a user manual for the PyMite user.

Overview
--------

PyMite shall support the simple form of `assert statments`_ and may support
the extended form.  The assert statement is useful in unit tests for the
PyMite VM itself and is thus worth implementing.  The assert statement
inherently depends on having exceptions available.  When an assertion fails,
an ``AssertionError`` exception is raised.  To read about exceptions in
PyMite, see `ErrorsAndExceptions`_.

.. _`ErrorsAndExceptions`: TBD


Background
----------

An simple example assert statement looks like this::

    assert arg != None

The above line of code compiles to the following bytecode::

    >>> co = compile("assert arg != None","fn","single")
    >>> dis.disco(co)
      1           0 LOAD_NAME                0 (arg)
                  3 LOAD_CONST               0 (None)
                  6 COMPARE_OP               3 (!=)
                  9 JUMP_IF_TRUE             7 (to 19)
                 12 POP_TOP
                 13 LOAD_GLOBAL              2 (AssertionError)
                 16 RAISE_VARARGS            1
            >>   19 POP_TOP
                 20 LOAD_CONST               0 (None)
                 23 RETURN_VALUE

All of the bytecodes listed above exist in PyMite release 02 except for
``RAISE_VARARGS``.  The ``RAISE_VARARGS`` bytecode is described `here`_
in these words::

    RAISE_VARARGS    argc
        Raises an exception. argc indicates the number of parameters to the
        raise statement, ranging from 0 to 3. The handler will find the
        traceback as TOS2, the parameter as TOS1, and the exception as TOS.

.. _`here`: http://www.python.org/dev/doc/maint24/lib/bytecodes.html


Implementation
--------------

To support the ``assert`` statement, Exceptions must first be supported by the
VM.  Once Exceptions exist, then the following describes the steps needed to
support the ``assert`` statment:

- Make ``pmImgCreator.py`` aware that ``RAISE_VARARGS`` is allowable.
- Add ``AssertionError`` exception to the builtins module (``__bi``) so it will
  be found by the ``LOAD_GLOBAL`` bytecode.
- Implement the ``RAISE_VARARGS`` bytecode.
- Write tests with valid and invalid ``assert`` statements (catch the invalid
  statements).

.. :mode=rest:
